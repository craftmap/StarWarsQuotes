from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.utils.markdown import hbold
from aiogram import Router
from aiogram.filters.command import Command, CommandObject
from aiogram import html
from core.data.utils import insert_data_to_db, table_exist, CREATE_TABLE_QUERY

from os import getenv
from db_connection import db_connection

router = Router()

# –ò–¥–µ—è: –≤—ã–∏—Å–∫–∏–≤–∞—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –∑–∞–ª–∞–π–∫–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã–¥–∞–≤–∞—Ç—å –µ–≥–æ –∑–∞ —Ü–∏—Ç–∞—Ç—É
# –ò–¥–µ—è: —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–∏—Ç–∞—Ç—ã?
# –ò–¥–µ—è: —Ü–∏—Ç–∞—Ç–∞ –¥–Ω—è —Å –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∫–∞—Ä—Ç–∏–Ω–∫–æ–π


def get_random_quote_from_table(table_name, author: str = None):
    table_name = table_name.replace(' ', '_')
    with db_connection() as connection:
        cursor = connection.cursor()
        if not table_exist(table_name):
            return '–ü–æ—Ö–æ–∂–µ, –≤—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —Ü–∏—Ç–∞—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µü§∑'
        author_query = (f" WHERE author_ru='{author[0].swapcase()+author[1:]}' "
                        f"OR author_ru='{author[0]+author[1:]}' "
                        f"OR author_en='{author[0].swapcase()+author[1:]}' "
                        f"OR author_en='{author[0]+author[1:]}' ")
        s = f'SELECT * FROM {table_name}{author_query if author else ""}ORDER BY RAND() LIMIT 1;'
        print(s)
        cursor.execute(
            f'SELECT * FROM {table_name}{author_query if author else ""}ORDER BY RAND() LIMIT 1;'
        )
        doc = cursor.fetchone()
        cursor.close()
        if not doc:
            return '–ü–æ—Ö–æ–∂–µ, –≤—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —Ü–∏—Ç–∞—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µü§∑'
        if doc['quote_translation'] == '':
            return f'<b>–¶–∏—Ç–∞—Ç–∞</b>:\n' \
                   f'{doc["quote"]}\n' \
                   f'¬© <i>{doc["author_ru"]}</i>'
        else:
            return f'<b>Quote</b>:\n' \
                   f'{doc["quote"]}\n' \
                   f'¬© <i>{doc["author_en"]}</i>\n\n' \
                   f'<b>–¶–∏—Ç–∞—Ç–∞</b>:\n' \
                   f'<tg-spoiler>{doc["quote_translation"]}\n' \
                   f'¬© <i>{doc["author_ru"]}</i></tg-spoiler>'


async def notify_the_creator(message, command):
    await message.bot.send_message(
        getenv('ADMIN_ID'),
        f'{message.from_user.full_name} command <b>{command}</b>\n'
    )


def get_chat_title(message: Message) -> str:
    return message.chat.username.title() if message.chat.type == 'private' else message.chat.title


@router.message(Command("rand"))
async def command_random_quote(message: Message) -> None:
    text = get_random_quote_from_table('quotes_star_wars')
    await message.answer(text)
    await notify_the_creator(message, 'rand')


@router.message(Command("rand_from_chat"))
async def command_random_quote_from_chat(message: Message) -> None:
    text = get_random_quote_from_table(get_chat_title(message) + '_table')
    await message.answer(text)
    await notify_the_creator(message, 'rand_from_chat')


@router.message(Command('author'))
async def command_quote_by_author(message: Message, command: CommandObject) -> None:
    if command.args is None:
        await message.answer(
            '<b>‚ùå–û—à–∏–±–∫–∞</b>: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã. –ü—Ä–∏–º–µ—Ä:\n'
            f'/author –í–∞—Å—è'
        )
        return
    table_name = get_chat_title(message) + '_table'
    text = get_random_quote_from_table(table_name, author=command.args.strip())
    await message.answer(text)
    await notify_the_creator(message, 'author')


@router.message(Command("add"))
async def add_quote(
        message: Message,
        command: CommandObject
):
    if command.args is None:
        await message.answer(
            '<b>‚ùå–û—à–∏–±–∫–∞</b>: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã. –ü—Ä–∏–º–µ—Ä:\n'
            f'/add –í–∞—Å—è: –ê –≤—Å—ë-—Ç–∞–∫–∏ –æ–Ω–∞ –∫—Ä—É–≥–ª–∞—è!'
        )
        return
    try:
        author, quote = command.args.split(": ", maxsplit=1, )
    except ValueError:
        await message.answer(
            '<b>‚ùå–û—à–∏–±–∫–∞</b>: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n'
            f'/add –í–∞—Å—è: –±–ª–∞-–±–ª–∞!'
        )
        return

    if message.chat.type == 'private':
        table_name = message.chat.username.title() + '_table'
    else:
        table_name = message.chat.title + '_table'
    table_name = table_name.replace(' ', '_')
    if not table_exist(table_name):
        with db_connection() as connection:
            cursor = connection.cursor()
            cursor.execute(CREATE_TABLE_QUERY.format(table_name=table_name))
            connection.commit()
            cursor.close()

    insert_data_to_db(
        data=[
            {
                'quote': quote,
                'quote_translation': '',
                'author_en': '',
                'author_ru': author,
            }
        ],
        table_name=table_name,
    )
    await message.answer(f'<b>–¶–∏—Ç–∞—Ç–∞:</b> {author}: {quote} - –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ ‚úÖ')
    await notify_the_creator(message, 'add')


@router.message(Command("help"))
async def command_help(message: Message) -> None:
    await message.answer(
        '<b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>\n'
        '/rand ‚Äî —Å–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞\n'
        f'/rand_from_chat - –í—ã–¥–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É –∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞\n'
        '/author <–∞–≤—Ç–æ—Ä> - –í—ã–¥–∞—Ç—å —Ü–∏—Ç–∞—Ç—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–≤—Ç–æ—Ä–∞\n'
        f'/add {html.bold(html.quote("<–∞–≤—Ç–æ—Ä>: <—Ü–∏—Ç–∞—Ç–∞>"))} ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É (–í –û–î–ù–û–ú —Å–æ–æ–±—â–µ–Ω–∏–∏)'
    )
    await notify_the_creator(message, 'help')


@router.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    """
    This handler receives messages with `/start` command
    """
    await message.answer(f'Hello, {hbold(message.from_user.full_name)}!')
    await command_help(message)
    await notify_the_creator(message, 'start')


@router.message()
async def unknown_command(message: Message) -> None:
    if message.chat.type == 'private':
        await message.reply('–ú–Ω–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞ —ç—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ü§∑\n–í–æ—Ç —á—Ç–æ —è —É–º–µ—é:')
        await command_help(message)
        await notify_the_creator(message, 'unknown')
