from aiogram.filters import CommandStart
from aiogram.types import Message
from aiogram.utils.markdown import hbold
from aiogram import Router
from aiogram.filters.command import Command, CommandObject
from aiogram import html
from core.data.utils import insert_data_to_db, table_exist, CREATE_TABLE_QUERY

from os import getenv
from db_connection import db_connection

router = Router()

# TODO: –≤—ã–∏—Å–∫–∏–≤–∞—Ç—å –≤ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –∑–∞–ª–∞–π–∫–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã–¥–∞–≤–∞—Ç—å –µ–≥–æ –∑–∞ —Ü–∏—Ç–∞—Ç—É


def get_random_quote_from_table(table_name):
    with db_connection() as connection:
        cursor = connection.cursor()
        if not table_exist(table_name):
            return '–ü–æ—Ö–æ–∂–µ, –≤—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —Ü–∏—Ç–∞—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µü§∑'
        cursor.execute(f'SELECT * FROM {table_name} ORDER BY RAND() LIMIT 1;')
        doc = cursor.fetchone()
        cursor.close()
        if not doc:
            return '–ü–æ—Ö–æ–∂–µ, –≤—ã –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ —Ü–∏—Ç–∞—Ç –≤ —ç—Ç–æ–º —á–∞—Ç–µü§∑'
        if doc['quote_translation'] == '':
            return f'<b>–¶–∏—Ç–∞—Ç–∞</b>:\n' \
                   f'{doc["quote"]}\n' \
                   f'¬© <i>{doc["author_ru"]}</i>'
        else:
            return f'<b>Quote</b>:\n' \
                   f'{doc["quote"]}\n' \
                   f'¬©<i>{doc["author_en"]}</i>\n\n' \
                   f'<b>–¶–∏—Ç–∞—Ç–∞</b>:\n' \
                   f'<tg-spoiler>{doc["quote_translation"]}\n' \
                   f'¬© <i>{doc["author_ru"]}</i></tg-spoiler>'


@router.message(Command("rand"))
async def command_random_quote(message: Message) -> None:
    text = get_random_quote_from_table('quotes_star_wars')
    await message.answer(text)
    await message.bot.send_message(
        getenv('ADMIN_ID'),
        f'{message.from_user.full_name} command rand\nGot: {text}'
    )


@router.message(Command("rand_from_chat"))
async def command_random_quote(message: Message) -> None:
    text = get_random_quote_from_table(message.chat.username.title() + '_table')
    await message.answer(text)
    await message.bot.send_message(
        getenv('ADMIN_ID'),
        f'{message.from_user.full_name} command rand_from_chat\nGot: {text}'
    )


@router.message(Command("add"))
async def add_quote(
        message: Message,
        command: CommandObject
):
    if command.args is None:
        await message.answer(
            '<b>–û—à–∏–±–∫–∞</b>: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∞—Ä–≥—É–º–µ–Ω—Ç—ã. –ü—Ä–∏–º–µ—Ä:\n'
            f'/add –í–∞—Å—è: –ê –≤—Å—ë-—Ç–∞–∫–∏ –æ–Ω–∞ –∫—Ä—É–≥–ª–∞—è!'
        )
        return
    try:
        author, quote = command.args.split(": ", maxsplit=1, )
    except ValueError:
        await message.answer(
            '<b>–û—à–∏–±–∫–∞</b>: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ü—Ä–∏–º–µ—Ä:\n'
            f'/add –í–∞—Å—è: –±–ª–∞-–±–ª–∞!'
        )
        return

    chat_title = message.chat.username.title()
    table_name = chat_title + '_table'
    if not table_exist(table_name):
        with db_connection() as connection:
            cursor = connection.cursor()
            cursor.execute(CREATE_TABLE_QUERY.format(table_name=table_name))
            connection.commit()
            cursor.close()

    insert_data_to_db(
        data=[
            {
                'quote': quote,
                'quote_translation': '',
                'author_en': '',
                'author_ru': author,
            }
        ],
        table_name=table_name,
    )


@router.message(Command("help"))
async def command_random_quote(message: Message) -> None:
    await message.answer(
        '<b>–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞:</b>\n'
        '/rand ‚Äî —Å–ª—É—á–∞–π–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞\n'
        f'/rand_from_chat - –í—ã–¥–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É –∏–∑ —ç—Ç–æ–≥–æ —á–∞—Ç–∞\n'
        f'/add {html.bold(html.quote("<–∞–≤—Ç–æ—Ä>: <—Ü–∏—Ç–∞—Ç–∞>"))} ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —Ü–∏—Ç–∞—Ç—É'
    )
    await message.bot.send_message(getenv('ADMIN_ID'), f'{message.from_user.full_name} command help\n')


@router.message(CommandStart())
async def command_start_handler(message: Message) -> None:
    """
    This handler receives messages with `/start` command
    """
    await message.answer(f'Hello, {hbold(message.from_user.full_name)}!')
